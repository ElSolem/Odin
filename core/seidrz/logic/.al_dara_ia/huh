# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

#add llvm
export PATH="/home/elsolem/llvm:$PATH"

#add odin
export PATH="/home/elsolem/odin:$PATH"
export PATH="/path/to/Odin/folder:$PATH"
export PATH="$HOME/odin:$PATH"

# Add Zeroth function
#!/bin/bash
Zeroth() {
    local x=$1
    local now=$(awk '{print $1 + $2}' /proc/self/stat)  # user + system time in clock ticks
    local clk_tck=$(getconf CLK_TCK)
    now=$(echo "$now / $clk_tck" | bc -l)

    local w=$(echo "2 * a(1) * 2" | bc -l)  # 2π
    local fibprime=2971215073.0
    local theta=$(echo "$now * a(1) * 4" | bc -l)  # π * now

    local ei_re=$(echo "c($theta)" | bc -l)
    local ei_im=$(echo "s($theta)" | bc -l)
    local ei_mag=$(echo "${ei_re#-} + ${ei_im#-}" | bc -l)

    local max_val=$(echo "$fibprime * $now * a(1) * 4 * $ei_mag" | bc -l)

    local count=0

    for x_ in $(seq -10000 10000); do
        local nx=$x_
        local wt_abs=$(echo "$w * $nx" | bc -l | tr -d '-')

        if (( $(echo "$wt_abs <= 0" | bc -l) )); then
            log_val=0
        else
            log_val=$(echo "l($wt_abs)/l(2)" | bc -l)
        fi

        local exp_angle=$(echo "$wt_abs * $log_val" | bc -l)
        local tan_val=$(echo "s($exp_angle)/c($exp_angle)" | bc -l)
        local angle=$(echo "$w * $nx" | bc -l)
        local cos_val=$(echo "c($angle)" | bc -l)
        local sin_val=$(echo "s($angle)" | bc -l)

        local xt=$(echo "$nx * $now" | bc -l)
        local yt=$(echo "$nx * $now" | bc -l)
        local e6=$(echo "${xt#-} + ${yt#-}" | bc -l)

        local diff=$(echo "(${nx#-} - ${nx#-}) * $now" | bc -l)

        local cond=0
        if (( $(echo "$ei_re > 0.5" | bc -l) )) ||
           (( $(echo "$ei_im > 0.5" | bc -l) )) ||
           (( $(echo "$tan_val > 0" | bc -l) )) ||
           (( $(echo "$cos_val > 0" | bc -l) && $(echo "$sin_val > 0" | bc -l) )) ||
           (( $(echo "$e6 <= 1.0" | bc -l) )) ||
           (( $(echo "$diff >= 0.0" | bc -l) )); then
            cond=1
        fi

        if [[ $cond -eq 1 ]]; then
            count=$((count + 1))
        fi

        local time1=$(echo "$fibprime * $now" | bc -l)
        local time2=$(echo "$fibprime / $now" | bc -l)
        local tan1=$(echo "s($time1)/c($time1)" | bc -l)
        local tan2=$(echo "s($time2)/c($time2)" | bc -l)

        if (( $(echo "${tan1#-} > 1000000" | bc -l) )) || (( $(echo "${tan2#-} > 1000000" | bc -l) )); then
            echo "false"
            return 1
        fi

        local epsilon="0.000001"
        local l1=$(echo "l(${tan1#-} + $epsilon)/l(2)" | bc -l)
        local l2=$(echo "l(${tan2#-} + $epsilon)/l(2)" | bc -l)

        if (( $(echo "$l1 == $l2" | bc -l) )) || (( $(echo "$l1 != $l2" | bc -l) )); then
            echo "true"
            return 0
        fi
    done

    echo "false"
    return 1
}

# Add zcon conversion utility
zcon() {
    if Zeroth "$1"; then
        echo "[zcon] Zeroth filter passed. Starting conversion..."

        find . -type f \( -iname "*.mkv" -o -iname "*.mp4" -o -iname "*.avi" \) -print0 | while IFS= read -r -d '' file; do
            output="${file%.*}_1080p.mp4"
            if [[ -f "$output" ]]; then
                echo "Skipping $file, output already exists."
                continue
            fi

            ffmpeg -i "$file" -vf "scale=-2:1080" -c:v libx265 -crf 28 -c:a aac -b:a 128k "$output"

            if [[ $? -eq 0 ]]; then
                rm "$file"
                echo "Deleted original: $file"
            else
                echo "Failed to convert: $file — not deleting."
            fi
        done
    else
        echo "Zeroth function returned false, skipping conversion."
    fi
}

# Add zwine wrapper for wine with Zeroth filter
zwine() {
    local check="$1"
    shift

    if Zeroth "$check"; then
        wine "$@"
    else
        echo "Zeroth check failed. Not running wine."
    fi
}

export PATH="$HOME/bin:$PATH"
